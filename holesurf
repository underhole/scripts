#!/usr/bin/env bash
#====================HEADER==========================================|
#AUTOR
# Jefferson 'Slackjeff' Rocha <root@slackjeff.com.br>
#
#LICENCE
# MIT
#
#PROGRAM
# holesurf - Syncronize Holes on underhole network.
#
#LICENSE
# MIT
#
#CHANGELOG
# View on changelog.txt
#====================================================================|


##############################################
# VARS
##############################################
export PRG='holesurf'               # Name Program
export USERDIR="${HOME}/.underhole" # Directory of ALL holes
export HOLELIST="${USERDIR}/holelist.txt"
export RSYNC_PASSWORD=''            # Inicialize variable

# 0 OFF | 1 ON
# If you need a browser please use 1.
export BROWSER="1" # Default is ON.

# if 'BROWSER' is 1, Take here your browser.
MYBROWSER=""

#COLORS
red='\033[31;1m'
yellow='\033[33;1m'
blue='\033[34;1m'
end='\033[m'
bg_dir='\033[37;44;1m'
bg_file='\033[37;41;1m'

##############################################
# FUNC
##############################################

# Read a CSV hole-list
_READ()
{
    local c1 c2 c3
    local IFS

    while IFS='&' read -r c1 c2 c4 c5 c6; do
        [[ "$c1" =~ ^# ]] && continue
        echo -e "HOLE:\t${c1}\nIP:\t${c2}\nPORT:\t${c5}\nCOM:\t${c6}\n--------------------------------------------\n"
    done <"$HOLELIST"
    return 0
}

# Password + Salt For secure BD.
_SECURE_PASS()
{
    local salt_size='5' # Tamanho que terá o salt
    local delimiter=':'
    local PASSWORD="$1"

    # Nulo cai fora
    [[ -z "$PASSWORD" ]] && { echo "The input parameter is null."; return 1 ;}
    # Gerando sal randômico
    SALT="$(head /dev/urandom | tr -dc "0-9a-zA-Z" | head -c "$salt_size"; echo)"
    # Printa pra noix
    printf "${SALT}${delimiter}"
    printf "${PASSWORD}${SALT}" | sha256sum | cut -d ' ' -f 1
}

_HELP()
{
    cat <<EOF
holesurf - Automate Network Synchronization Underhole

holesurf [OPTIONS]
USAGE:

sync    Synchronize your favorite holes individually. 
show    View all your favorite holes in holelist.txt
add     Add a hole in your holelist.txt
help    Show this help

For HELP
#underhole ON FREENODE
EOF
}

##############################################
# TEST
##############################################
[[ "$UID" = '0' ]] && { echo "Root? Is not secure. ABORT"; exit 1 ;} # Root?
[[ ! -d "$USERDIR" ]] && mkdir -v "$USERDIR" # create a underhole directory
if [[ ! -e "$HOLELIST" ]]; then # Exist hole-list?
    echo 'dadhole&dadhole.duckdns.org&thedadhole&12000&The 1s Hole Wiki.' >> "$HOLELIST"
fi

# Check Browsers exist.
if [[ -z "$MYBROWSER" ]] && [[ "$BROWSER" = '1' ]]; then
  for browser in 'lynx' 'links' 'firefox'; do
      if which "$browser" &>/dev/null; then
          export BROWSER="$browser"
          break
      fi
  done
fi

##############################################
# MAIN
##############################################

case $1 in
    sync) # Sync hole-list
          shift # down
          OLDIFS="$IFS" # Save IFS.
          inc='0' # Increment var
          # Print
          while IFS='&' read -r column1 column2 column3 column4; do
              [[ "$column1" =~ ^# ]] && continue
              echo -e "${red}[ $inc ]${end} $column1-$column2"
              options[i++]="$column1&$column2&$column3&$column4" # Capture all line
              inc=$(($inc + 1)) # Inc for Menu
          done < "$HOLELIST"
          IFS="$OLDIFS" # Return IFS.
          read -p $'\n\033[37;44;1mServer to Sync:\033[m ' select_server
          if ! [[ "$select_server" =~ ^[0-9]+$ ]]; then
              echo "$select_server Invalid Option."
              exit 1
          fi
          # Capture Fields and Sync
          HOLE="$(cut -d '&' -f 1 <<< ${options[$select_server]})"
          HOST="$(cut -d '&' -f 2 <<< ${options[$select_server]})"
          PASS="$(cut -d '&' -f 3 <<< ${options[$select_server]})"
          PORT="$(cut -d '&' -f 4 <<< ${options[$select_server]})"
          # Convert Hash + Salt
          
          # Password arg Rsync
          RSYNC_PASSWORD="$PASS"
          echo -e "${blue}Syncing${end} ${USERNAME} ${blue}ON${end} ${HOST} ..."
          if rsync -avzh rsync://${HOLE}@${HOST}:${PORT}/hole/ "${USERDIR}/${HOLE}"; then
              echo -e "${yellow}========Sync OK${end}"
              echo -e "${blue}========Available in:${end} ${USERDIR}/${HOLE}"
              eval $BROWSER "${USERDIR}/${HOLE}"
          else
              echo -e "${red}========SYNC ERROR. ${HOLE} ${HOST}${end}"
          fi
    ;;

    show) # Show your hole-List.
          shift # Down.
          [[ -e "$HOLELIST" ]] && _READ
    ;;

    add) # Add new hole in hole-list
          read -p "Enter Name of Hole: " hole
          read -p "Enter Host: " host
          read -p "Enter Pass: " pass
          read -p "Enter Port: " port
          read -p "Enter Comment: " comment
          # Exist?
          while IFS= read line; do
              [[ "$line" =~ ^${hole}\&${host} ]] && { echo -e "${red}$hole exist in $HOLELIST${end}"; exit 1 ;}
          done < "$HOLELIST"
          echo "${hole}&${host}&${pass}&${port}&${comment}" >> "$HOLELIST"
          echo -e "${blue}${hole}-${host} Was successfully included in your hole-list${end}"
          exit 0
    ;;
    *) _HELP ;;
esac

